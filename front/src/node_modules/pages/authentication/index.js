import React, { useContext, useEffect, useState, useCallback, useRef } from "react";
import { NavLink, Navigate, useParams, useLocation, useNavigate } from "react-router-dom";
import { useStateIfMounted } from "use-state-if-mounted"
import './main1.css';
import './util.css';
import './vendor/select2/select2.min.css'
import './vendor/bootstrap/css/bootstrap.min.css'
import './fonts/font-awesome-4.7.0/css/font-awesome.min.css'
import './vendor/animate/animate.css'
import './vendor/css-hamburgers/hamburgers.min.css'
import './vendor/select2/select2.min.css'


import axios from 'axios'
import useFetch from '../../hooks/useFetch'
import useLocalStorage from '../../hooks/useLocalStorage'
import { CurrentUserContext } from '../../contexts/currentUser'
import BackendErrorMessages from './components/backendErrorMessages'
import { UserInfoContext } from '../../contexts/userInfo'
import RestService from '../../services/tradeUnionService'


const rest1 = new RestService()
const Authentication = () => {

  const isLoginPage = window.location.pathname === '/login' ? true : false
  const [isLogin, setIsLogin] = useState(isLoginPage)
  const pageTitle = isLogin ? 'Sign in' : 'Sign up'
  const descriptionLink = isLogin ? '/register' : '/login'
  const descriptionText = isLogin ? 'Need an account' : 'Have an account?'
  const apiUrl = isLogin ? '/auth/login' : '/auth/register'
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [{ response, isLoading, error }, doFetch] = useFetch(apiUrl);
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [state, dispatch] = useContext(CurrentUserContext);
  const loginRef = useRef('')
  const passwordRef = useRef('')
  const [validLoginMessage, setValidLoginMessage] = useState('')

  console.log('window location - ',  window.location.pathname)

  const handleSubmit = (event) => {
    console.log('логин - ', loginRef)
    event.preventDefault()
    const user = isLogin ? { email, password } : { email, password, firstName, lastName}
    const headers = {
      'Content-Type': 'application/json',
    }
    doFetch({
      method: 'POST',
      data: {
        ...user
      },
      headers
    }
    )
    dispatch({ type: 'LOADING' })
  }

  const initToken = () => {
    localStorage.setItem('token', response.token)
    localStorage.setItem('refreshToken', response.refresh_token)
  }

  useEffect(() => {
    console.log("сделали диспатч")
    console.log(state)
  }, [dispatch])

  useEffect(() => {
    if (!response) {
      return
    }
    initToken()
    rest1.getUser()
      .then(item => {
        localStorage.setItem('loginUser', JSON.stringify(item))
      })
      .then(() => {
        dispatch({ type: 'SET_AUTHORIZED', payload: response })
        console.log(response)
      })
      .catch(item => {
        dispatch({ type: 'SET_UNAUTHORIZED' })
        console.log('catched ', item)
      })
  }, [handleSubmit, response])


  useEffect(() => {
    if (!error) {
      return
    }
    dispatch({ type: 'SET_UNAUTHORIZED' })
    console.log('error ТУТ - ', error.data)
    console.log('alert', loginRef)
    error.data.map(item => {
      if (item.path === "email") {
        loginRef.current.classList.add('alert-validate')
        setValidLoginMessage(item.message)
      }
      if (item.path === "password") {
        passwordRef.current.classList.add('alert-validate')
        // setPasswordMessage(item.message)
      }
    })


  }, [error])

  const changeEvent = (e) => {
    console.log('event - ', e)
    if (e.target.type === "password") {
      if (passwordRef.current.classList.contains('alert-validate')) {
        passwordRef.current.classList.remove('alert-validate')
      }
      setPassword(e.target.value)
    }

    if (e.target.type === "text") {
      if (loginRef.current.classList.contains('alert-validate')) {
        loginRef.current.classList.remove('alert-validate')
      }
      setEmail(e.target.value)
    }
  }

  return (
    <div className="limiter">
      <div className="container-login100">

        <div className="wrap-login100">
          {/* <h1 className = 'text-xs-center' >{pageTitle}</h1> */}
          <div className="login100-pic js-tilt" style={{ willChange: 'transform' }} data-tilt>
            <img src={process.env.PUBLIC_URL + '/img/img-01.png'} alt="IMG" />
          </div>

          <form
            className="login100-form validate-form"
            onSubmit={handleSubmit}>

            <h1 className="login100-form-title">
              Member Login
            </h1>
            {/* {error &&<BackendErrorMessages backendErrors ={error}/>} */}
            {!isLogin && (
            <>
            <div className="wrap-input100 validate-input" data-validate="Valid email is required: ex@abc.xyz">
              <input

                className="input100"
                type="text"
                name="username"
                placeholder="First Name"
                value={firstName}
                onChange={(e) => { setFirstName(e.target.value) }}
              />
              <span className="focus-input100"></span>
              <span className="symbol-input100">
                <i className="fa fa-address-book" aria-hidden="true"></i>
              </span>
            </div>
            <div className="wrap-input100 validate-input" data-validate="Valid email is required: ex@abc.xyz">
            <input

              className="input100"
              type="text"
              name="username"
              placeholder="Last Name"
              value={lastName}
              onChange={(e) => { setLastName(e.target.value) }}
            />
            <span className="focus-input100"></span>
            <span className="symbol-input100">
              <i className="fa fa-address-book-o" aria-hidden="true"></i>
            </span>
          </div>
          </>
            )}
            <div ref={loginRef} className="wrap-input100 validate-input" data-validate={validLoginMessage}>
              <input
                className="input100"
                type="text"
                name="email"
                placeholder="Email"
                value={email}
                onChange={changeEvent}
              />
              <span className="focus-input100"></span>
              <span className="symbol-input100">
                <i className="fa fa-envelope" aria-hidden="true"></i>
              </span>
            </div>

            <div ref={passwordRef} className="wrap-input100 validate-input" data-validate="Password is required">
              <input

                className="input100"
                type="password"
                name="pass"
                placeholder="Password"
                value={password}
                onChange={changeEvent} />
              <span className="focus-input100"></span>
              <span className="symbol-input100">
                <i className="fa fa-lock" aria-hidden="true"></i>
              </span>
            </div>

            <div className="container-login100-form-btn">
              <button
                className="login100-form-btn"
                disabled={isLoading}>
                {pageTitle}
              </button>
            </div>

            <div className="text-center p-t-12">
              <a className="txt2" href={descriptionLink}>
                {descriptionText}
              </a>
            </div>

            <nav className="text-center p-t-136">
              <nav className="txt2">

                <i className="fa fa-long-arrow-right m-l-5" aria-hidden="true"></i>
              </nav>
            </nav>
          </form>
        </div>
      </div>
    </div>

  )
}

export default Authentication