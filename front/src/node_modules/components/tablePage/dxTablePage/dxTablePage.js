import React, { useEffect, useRef, useState, useContext } from 'react'
import {useParams} from 'react-router-dom'
import {
    DataGrid,
    Column,
    Grouping,
    GroupPanel,
    LoadPanel,
    Editing,
    Pager,
    Paging,
    SearchPanel
} from 'devextreme-react/data-grid';

import Paper from '@material-ui/core/Paper';
import CustomStore from 'devextreme/data/custom_store';
import RestService from '../../../services/tradeUnionService'
import {routes} from '../../../pages/routes'
import dxTextBox from "devextreme/ui/text_box";
import './dxTablePage.css'
import { Tooltip } from 'devextreme-react/tooltip';
import {UserInfoContext} from '../../../contexts/userInfo'
import useLocalStorage from '../../../hooks/useLocalStorage'
import { useNavigate } from "react-router-dom";
import ScrollView from 'devextreme-react/scroll-view';
const rest1 = new RestService()


const DxTablePage = () =>{
    let tableName = useParams()
    const [error, setError] = useState({hasError: false,
                                        errors:{},
                                        event: null})
    const [rowIndex, setRowIndex] = useState(0)
    const [target, setTarget] = useState(null)
    const [visibleToolTip, setVisibleToolTip] = useState(false)
    const [dataSource, setDaSource] = useState(null)
    const [rest,] = useState(rest1)
    const [toolTipalidationMessage, setToolTipValidationMessage] = useState(null)
    const [userInfo, setUserInfo] = useContext(UserInfoContext)
    const [allowAdding, setAllowAdding] = useState(false)
    const [allowDeleting, setAllowDeleting] = useState(false)
    const [allowUpdating, setAllowUpdating] = useState(false)
    const [userLogin, setUserLogin] = useLocalStorage('loginUser')
    const navigate = useNavigate()
 

    let editTable = routes.filter(item =>{
         return item.table == tableName.tablename
    })[0]

    const renderContent = (e) => {
        return (
            <p>{toolTipalidationMessage}</p>
        );
    }
  useEffect(() =>{
      
        const dataSource1 =  new CustomStore({
                key: "id",
                load: () => rest.all(editTable.dataSource),
                insert: (value) => rest.insert(editTable.dataSource, value),
                remove: (key) => rest.delete(editTable.dataSource, key),
                update: (key, values) => rest.update(editTable.dataSource, key, values), 
            })
        setDaSource(dataSource1)
        
        const infoLoginUser = JSON.parse(userLogin).permissionList.filter(item => item.resource == editTable.table)
        console.log('INFO', infoLoginUser)

        infoLoginUser.filter(item => item.action == 'insert').map(item =>{
            setAllowAdding(item.permit)
        })
        infoLoginUser.filter(item => item.action == 'delete').map(item =>{
            setAllowDeleting(item.permit)
        })
        
        infoLoginUser.filter(item => item.action == 'update').map(item =>{
            setAllowUpdating(item.permit) 
        })
    }, [editTable])

    function onClick(e){
        navigate(`/admin/forms${editTable.dataSource}/${e.data.id}`)
    }
       
    const focusTextBox = (e) =>{
        if(e.component.NAME != "dxTextBox"){
            return
        }
        setToolTipValidationMessage(e.component._options._optionManager._options.validationError.message)
        setTarget(e.element)
    }
    const focusOutTextBox = (e) =>{
        setTarget(null)
        setVisibleToolTip(false)    
    }
    useEffect(()=>{   
      console.log('error has - ' ,  error)
        if(error.hasError == true){
            error.errors.map(item =>{
                setErrorsOnCellElement (error.event, rowIndex, item.path, item.message)   
        })}
        setVisibleToolTip(false)
    },[error, setError])
      
    const setErrorsOnCellElement = (e, rowIndex, path, message) => {
        const cellElement =e.component.getCellElement(rowIndex, path);   
               
        if (cellElement) {
            const editorElement = cellElement.getElementsByClassName("dx-textbox")[0]; // Get the editor element
            const textBox = dxTextBox.getInstance(editorElement); 
            if(textBox){
            textBox.option({
                validationMessageMode: "always",
                isValid: false,
                onFocusIn: focusTextBox,
                onFocusOut: focusOutTextBox,
                validationErrors: [{ message: `${message}` }],
                validationStatus: "invalid",
                height:'100%',
                shading: true,
                shadingColor: 'black'
                // disabled:true
            });
            textBox.on("change", function(e){
                console.log('change - ' , e)
                textBox.option({
                    validationStatus: "valid",
                });
            });
        }
        } else {
            e.errorText = message;
        }
        
};

const onDataError = (e) =>{
        const errorList = rest.getError()
        setError({hasError: true, errors: errorList, event: e})       
}
const onSaving = (e) =>{
    setRowIndex( e.component.getRowIndexByKey(e.changes[0].key))
}

return(
        <>

         <h2 className={'content-block'}>Tasks</h2>
             
             <div className={'content-block dx-card responsive-paddings'}>
                <Paper>
                    <DataGrid
                            dataSource={dataSource}
                            allowColumnReordering={true}
                            rowAlternationEnabled={true}
                            showBorders={true}
                            repaintChangesOnly={true} 
                            focusedRowEnabled={true}
                            defaultFocusedRowIndex={0}
                            onRowDblClick={onClick}
                            onDataErrorOccurred={onDataError}   
                            showColumnLines={true}
                            showRowLines={true}
                            onSaving = {onSaving}
                            activeStateEnabled={true}
                            className={'dx-card wide-card'}
                            columnAutoWidth={true}
                            columnHidingEnabled={true}
                            
        
        >
                                <Editing
                                    allowAdding={allowAdding}
                                    allowDeleting={allowDeleting}
                                    allowUpdating={allowUpdating}
                                    refreshMode='reshape'  
                
                                />                       
                                <Paging enabled defaultPageSize={20} />
                                <Pager showPageSizeSelector={true} />       
                                <GroupPanel visible={true} />
                                <SearchPanel visible={true} highlightCaseSensitive={true} />
                                {/* <LoadPanel enabled /> */}
                                <Grouping autoExpandAll={false} />                       
                                {editTable.columns.filter(item => item.roleWhoNotSee.includes(JSON.parse(userLogin).role)===false).map( item =>{
                                    return <Column key={item.dataField} {...item} {...item.tableProps} >

                                        </Column>
                                })}
                    </DataGrid>
                    
                    <Tooltip target={target}
                                        visible = {true}
                                        closeOnOutsideClick={true}
                                        contentRender={renderContent}
                                        disabled={false}
                                        style={{backgroundColor:'white'}}>                          
                    </Tooltip>
                                                
                    </Paper>
                    </div>
                   
        </>
    )
}
export default DxTablePage;