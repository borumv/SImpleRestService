import React, { useEffect, useState, useRef } from 'react';
import {useParams} from 'react-router-dom'
import Form, {
  SimpleItem,
  GroupItem,
  Label,
  TabbedItem,
  Tab,
  TabPanelOptions,
  ButtonItem,
  CompareRule,
  Item,
  RequiredRule
} from 'devextreme-react/form';
import { Button } from 'devextreme-react/button';
import TagBox from 'devextreme-react/tag-box';
import 'devextreme-react/text-area';
import notify from 'devextreme/ui/notify';
import RestService from '../../services/tradeUnionService'
import 'devextreme-react/text-area';
import './styles.css'
import useLocalStorage from '../../hooks/useLocalStorage'
import TextBox from 'devextreme-react/text-box'
const rest = new RestService();
import { confirm } from "devextreme/ui/dialog"
import dxTextBox from "devextreme/ui/text_box";


const UserForm = () =>{
  
    const actualPassword = useRef()
    const newPassword = useRef()
    const confirmPassword = useRef()
    const [data, setData] = useState()
    const [hasError , setHasError] = useState(false)
    const [userInfo,] = useLocalStorage('loginUser')
    const [error, setError] = useState({hasError: false,
      errors:{}})

    console.log('UserInfo - ' , JSON.parse(userInfo))
    console.log('data ' , data)   

    function refreshForm(){
      setData(JSON.parse(userInfo))
      console.log('data ' , data)
    }

    useEffect(()=>{
      refreshForm()
    }, [])


  
    const avatarRender = () =>{
        return (
          <div className="form-avatar-user"></div>
        );
      }

    const passwordPicture = () =>{

      return(
        <img src="\img\ChangePassword.png" className="img-password" alt="" />
      )
    }
    const phoneOptions = {
        mask: '+375 (00) 000-00-00'
    }

    const onClicked = (e)=>{
      console.log('CLICK EVENT', e)
      console.log('actual password - ', actualPassword)
      console.log('confirmPassword - ', confirmPassword)
      console.log('newPassword - ', newPassword.current)
      console.log('data - ', data)
      console.log('newPassword in data - ',  data.newPassword)

      e.event.preventDefault();
      let result = confirm("Точно хотите изменить пароль?", "Confirm");

      setHasError(false)
      result.then(()=>{
        if(result){
          rest.changePassword({email: data.userName, actualPassword: data.activePassword, newPassword: data.newPassword})
            .then(e => console.log('save -- ', e))
            .then(e => notify('данные сохранены'))
            .catch((e) => setHasError(true))
        }
      })
      // notify('click')
    }


    const setInvalidView = (datafield, message) =>{
      const datafieldNameElement = document.getElementsByName(datafield)[0]
      console.log("datafielSimple - ", datafield)
      console.log("dataFieldNotSimple - " , datafieldNameElement)
      const textBoxElement = dxTextBox.getInstance(datafieldNameElement.closest('.dx-textbox'))
      if(textBoxElement){
        textBoxElement.option({
            validationMessageMode: "always",
            isValid: false,
            validationStatus: "invalid",
            height:'100%',
            shading: true,
            shadingColor: 'black',
            validationErrors: [{ message: `${message}` }]
            // disabled:true
        });
        textBoxElement.on("change", function(e){
            textBoxElement.option({
                validationStatus: "valid",
            });
        });
      }else {
          console.log('editorElement - ', editorElement)
      }
    }


    //triggered, when we have had error
    useEffect(() =>{
      console.log('Has error', hasError)
      if(hasError){
        notify('возникла ошибка', "error")
        const errorList = rest.getError()
        setError({hasError: true, errors: errorList})       
      }else{
        setError({hasError: false, errors: {}})
      }},[hasError, setHasError])

    useEffect(()=>{
      if(error.hasError){
        console.log('has error - ', error)
        error.errors.map(item =>setInvalidView(item.path, item.message))
      }     
    },[error])

    const validationRules = {
      password: [
        { type: 'required', message: 'Password is required.' },
      ],
      hireDate: [
        { type: 'required', message: 'Hire Date is required.' },
      ],
    };

    const passwordOptions ={
        mode: 'password'
    }

    const validateForm = (e) => {
      e.component.validate();
    };

    function passwordComparison (){
      return data.newPassword;
    }

    return(
        <>
        <Form 
            formData={data}
            readOnly={false}
            labelMode ='static'

          // onContentReady = {validateForm}

            showColonAfterLabel={true}
            showValidationSummary={true}
            validationGroup="customerData">
        <GroupItem cssClass="first-group" colCount={4}>
            <Item render={avatarRender} >
            </Item>
            <GroupItem colSpan={3}>
              {/* <SimpleItem dataField="firstName"  width = '100%'/> */}
              <Item dataField="firstName" disabled={true} />
              <Item dataField="lastName" disabled={true}/>
              <Item dataField="userName" disabled={true}/>
            </GroupItem>
        </GroupItem>
            

        <GroupItem cssClass="second-group" colCount={2} caption="Change password">
            <GroupItem>
            <SimpleItem render={passwordPicture} />
                  
            </GroupItem>
            <GroupItem>
              <Item ref={actualPassword}
                    dataField="activePassword"  editorOptions = {passwordOptions} editorType="dxTextBox">
                    <RequiredRule message="Password is required" />
                    <Label text="Active Password" />
              </Item>
              <Item ref={newPassword} 
                    dataField="newPassword"  editorOptions = {passwordOptions} editorType="dxTextBox">
                    <RequiredRule message="new password is required" />
                    <Label text="New Password" />
              </Item>
              <Item ref={confirmPassword}
                    dataField="confirmPassword" editorOptions = {passwordOptions} editorType="dxTextBox">
                    <Label text="Confirm Password" />
                    <RequiredRule message="confirm password is required" />
                    <CompareRule
                      message="Password and Confirm Password do not match"
                      comparisonTarget={passwordComparison}
                      // comparisonType = '==='
                    />
              </Item>
              <SimpleItem>
              <Button 
                        onClick ={onClicked}
                        stylingMode="outlined"
                        type="default"
                        width={120}
                        icon="save"
                        
                        />
              </SimpleItem>


            </GroupItem>

              {/* <SimpleItem     itemType="button"
                              horizontalAlignment="center"
                              verticalAlignment="center"
                              cssClass="add-phone-button"
                              buttonOptions={submitButtonOptions}                                                
                              >
              </SimpleItem> */}
              <SimpleItem colSpan = {4}>

              </SimpleItem>  
              </GroupItem>
         
    

                {/* <SimpleItem itemType="button"
                                    horizontalAlignment="center"
                                    verticalAlignment="center"
                                    cssClass="add-phone-button"
                                    buttonOptions={submitButtonOptions}
                                    >
                </SimpleItem> */}

        
          
        
      </Form>
      </>
    );
  }


    

export default UserForm;