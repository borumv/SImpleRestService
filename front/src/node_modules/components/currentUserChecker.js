import { useEffect } from 'react';
import RestService from '../services/tradeUnionService'
import useLocalStorage from '../hooks/useLocalStorage'
import useFetch from '../hooks/useFetch'
import { useContext } from 'react';
import { CurrentUserContext } from '../contexts/currentUser'

const CurrentUserChecker = ({ children }) => {
  const [{ response, error }, doFetch] = useFetch('/user');
  const [{ isLoggedIn }, dispatch] = useContext(CurrentUserContext);
  const [token, setToken] = useLocalStorage('token');
  const [userInfo, setUserInfo] = useLocalStorage('loginUser');
  const [refreshToken, setRefreshToken] = useLocalStorage('refreshToken'); // Assuming you have a way to get and store the refresh token.

  console.log('userChecker - ', token);

  const rest = new RestService()

  useEffect(() => {

    if (!token || token === '' || token === 'null') {
      console.log('CUC', token);
      dispatch({ type: 'SET_UNAUTHORIZED' });
      return;
    }
    if (!userInfo || userInfo === '' || userInfo === 'null') {
      console.log('CUC', userInfo);
      dispatch({ type: 'SET_UNAUTHORIZED' });
      doFetch();
      return;
    }
    const tokenIsValid = rest.tokenIsValid({ 'token': token, 'email': 'admin@gmail.com' })
      .then((tokenIsValid) => {
        if (tokenIsValid == false) {
          rest.refreshToken(refreshToken)
            .then((response) => {
              console.log('we are refresh the token' , response )
              setToken(response.accessToken)
              setRefreshToken(response.refreshToken)
            })
            .catch((error) => {
              console.log('catch an error ->', error)
              dispatch({ type: 'SET_UNAUTHORIZED' });
            })
        }
      })
    console.log('if you want, that response - ', response);
    dispatch({ type: 'SET_AUTHORIZED', payload: userInfo });
  }, [doFetch, dispatch, token]);

  return children;
};

export default CurrentUserChecker;
