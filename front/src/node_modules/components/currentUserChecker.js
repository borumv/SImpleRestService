import React, {useContext, useEffect} from 'react';
import useFetch from '../hooks/useFetch'
import {CurrentUserContext} from '../contexts/currentUser'
import useLocalStorage from '../hooks/useLocalStorage'
import {UserInfoContext} from '../contexts/userInfo'


const СurrentUserChecker = ({children}) =>{

    console.log('userChecker - ')

    const [{response}, doFetch] = useFetch('/user');
    const [{isLoggedIn}, dispatch] = useContext(CurrentUserContext)
    const [token, setToken] = useLocalStorage('token')
    const [userInfo, ] = useLocalStorage('loginUser')

    console.log('userChecker - ', token)
    // if(token){
    //   dispatch({type: 'SET_AUTHORIZED', payload: response})
    // }



    useEffect(() => {
        if (!token || token === '' || token === 'null') {
          console.log('CUC',  token)
          dispatch({type: 'SET_UNAUTHORIZED'})
          return
        }
        if (!userInfo || userInfo === '' || userInfo === 'null') {
          console.log('CUC',  userInfo)
          // dispatch({type: 'SET_UNAUTHORIZED'})
          doFetch()
          return
        }

        dispatch({type: 'SET_AUTHORIZED', payload: response})

        console.log('но мы всё равно идём сюда')
      //  
        // dispatch({type: 'LOADING'})
      }, [doFetch, dispatch, token])
    

      useEffect(() => {
        if (!response) {
          // console.log('респонса нет')
          // dispatch({type: 'SET_UNAUTHORIZED'})
          return
        }
        console.log('респонс есть')
    
        dispatch({type: 'SET_AUTHORIZED', payload: response})
      }, [response, dispatch])
   

    return children
}



export default СurrentUserChecker