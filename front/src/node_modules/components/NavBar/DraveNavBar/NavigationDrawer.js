import React, {Fragment, useState, useRef, useCallback} from "react";

import ScrollView from 'devextreme-react/scroll-view';
import { Drawer } from "devextreme-react/drawer";
import { Toolbar, Item } from "devextreme-react/toolbar";
import {Routess} from '../../../pages/routes';
import NavigationList from './NavigationList'
import '../../../header/header.scss';
import UserPanel from '../../../user-panel/user-panel';
import Button from 'devextreme-react/button';
import { Template } from 'devextreme-react/core/template';
import useLocalStorage from '../../../hooks/useLocalStorage'
import useAuth from '../../../hooks/useAuth';
import { useScreenSize } from 'utils/media-query';
import {useMenuPatch} from 'utils/patches'
import './side-nav-outer-toolbar.scss';
import Footer from '../../footer/footer'
import SideNavigationMenu from '../../side-navigation-menu/side-navigation-menu'
import LoadPanel from 'devextreme-react/load-panel';
import ScrollToTop from '../../scrollToTop/scrollToTop'


function NavigationDrawer () {

    const[isDrawerOpen, setisDrawerOpen] = useState(false)
    const showSidebar = () =>  setisDrawerOpen(!isDrawerOpen)
    const [userLogin, setUserLogin] = useLocalStorage('loginUser')
    const auth = useAuth()[0].isLoggedIn
    const isLoad = useAuth()[0].isLoading
    const scrollViewRef = useRef();
    const { isXSmall, isLarge } = useScreenSize();
    const [patchCssClass, onMenuReady] = useMenuPatch();
    const [menuStatus, setMenuStatus] = useState(
      isLarge ? MenuStatus.Opened : MenuStatus.Closed
    );
  
    const toggleMenu = useCallback(({ event }) => {
      console.log(event, 'menustatus ', menuStatus)
      setMenuStatus(
        prevMenuStatus => prevMenuStatus === MenuStatus.Closed
          ? MenuStatus.Opened
          : MenuStatus.Closed
      );
      console.log(event, 'menustatus ', menuStatus)
      event.stopPropagation();
    }, []);
  
    const temporaryOpenMenu = useCallback(() => {
      setMenuStatus(
        prevMenuStatus => prevMenuStatus === MenuStatus.Closed
          ? MenuStatus.TemporaryOpened
          : prevMenuStatus
      );
    }, []);
  
    const onOutsideClick = useCallback(() => {
      console.log('isLoad' , isLoad)
      setMenuStatus(
        prevMenuStatus => prevMenuStatus !== MenuStatus.Closed && !isLarge
          ? MenuStatus.Closed
          : prevMenuStatus
      );
    }, [isLarge]);

   
        return (
            <>


                {auth && (
                <>
               <div className={'side-nav-outer-toolbar'}>
                <header className={'header-component'}>
                  <Toolbar className={'header-toolbar'}>
                    <Item visible={true}
                      location={'before'}
                      widget={'dxButton'}
                      cssClass={'menu-button'}
                    >
                      <Button icon="menu" stylingMode="text" onClick={toggleMenu} />
                    </Item>
                    <Item
                      location={'before'}
                      cssClass={'header-title'}
                      text={'Dashboard'} />
                    <Item
                      location={'after'}
                      locateInMenu={'auto'}
                      menuItemTemplate={'userPanelTemplate'}>
                      <Button
                        className={'user-button authorization'}
                        width={210}
                        height={'100%'}
                        stylingMode={'text'}>
                        <UserPanel menuMode={'context'} />
                      </Button>
                    </Item>
                    <Template name={'userPanelTemplate'}>
                      <UserPanel menuMode={'list'} />
                    </Template>
                  </Toolbar>
                </header>
                 <Drawer                  
                    height='100%'
                    width='100%'
                    // component={NavigationList}
                    opened={menuStatus === MenuStatus.Closed ? false : true}
                    openedStateMode={'shrink'}
                    position={'before'}
                    revealMode={isXSmall ? 'slide' : 'expand'}
                    closeOnOutsideClick={onOutsideClick}
                    className={['drawer', patchCssClass].join(' ')}
                    // template={'menu'}
                    minSize={isXSmall ? 0 : 60}
                    maxSize={250}
                    shading={isLarge ? false : true}
                    template={'menu'}
                    >
 
                    <ScrollView ref={scrollViewRef} className={'layout-body with-footer'}>
                    <div id="view"> 
  
                          <Routess />

                    <div className={'content-block'}>
                      <Footer>
                        Copyright © 2011-{new Date().getFullYear()} {'Бориска'}  Inc.
                        <br />
                        All trademarks or registered trademarks are property of their
                        respective owners.
                      </Footer> 
                    </div>  
                   </div>
                   </ScrollView>
                   <LoadPanel visible={isLoad} />;   
                   <Template name={'menu'}>
                    <SideNavigationMenu
                      compactMode={menuStatus === MenuStatus.Closed}
                      openMenu={temporaryOpenMenu}
                      onMenuReady={onMenuReady}
                    >
                    </SideNavigationMenu>
                  </Template>  
                  </Drawer>    
                  </div>
                 
           </> )} 
           {!auth&&( <>
                        <Routess/>
                        <LoadPanel visible={isLoad} />;  
                    </>
                    )}
           
            </>
        );
    } 
    const MenuStatus = {
      Closed: 1,
      Opened: 2,
      TemporaryOpened: 3
    };

export default NavigationDrawer;