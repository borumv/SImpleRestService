
import axios from 'axios';
import useLocalStorage from '../hooks/useLocalStorage'
import {ErrorTablePageContext} from './../contexts/errorTablePage'
import React, {useContext} from 'react'
const BASE_HOST = 'http://localhost:8090';

export default class RestService{  

    constructor(){
        this.errors = {
            hasError: false,
            errors: {}
        }
    }

    getError = () =>{
        return  this.errors.errors
    }

    setError = (hasError, errors) =>{
        this.errors.hasError = hasError
        this.errors.errors = errors
    }

    

    
    // static contextType = ErrorTablePageContext
    _send = async (method, url, value, page) => {
        this.setError(false, {})
        const headers = {
            'Content-Type': 'application/json', 
            Authorization: `${localStorage.getItem('token')}`
        }; 
        
        const res = await fetch(`${BASE_HOST}${url}`, {
            method: page ? 'POST' : method,
            headers,
            body: page && value ? JSON.stringify({page, value}) : value ? JSON.stringify(value) : JSON.stringify(page)
        });

        if (!res.ok) {
            if (res.status === 400 || res.status === 403 || res.status === 500 ) { 
                const error = await res.json();
                console.log('словили ошибку !', error)
                this.setError(true, error.errors)
               if (error)
                    // this.setError(true, error.errors)
                    throw new Error(error.errors.map(item=>{
                        return item.message

                    }));
            }

            throw new Error();
        }

        this.setError(false, {})
        return await res.json();
    }

    upload = async (table, value) => {
       
        const res = await axios.post(`${BASE_HOST}/api/${table}`, value, this.headers );
        if (res.status !== 200) {
            if (res.status === 400 || res.status === 403) {
                const criticalError = await res.text();
                if (criticalError)
                    return { criticalError };
            }

            return { criticalError: `Could not upload file because of error status: ${res.status}.` };
        }
        return await res.data.json();
    }


    
    loginIn = async (value) => {
        return await this._send('POST', '/api/auth/login', value);
    }


    getState  = () => {
        return this.errors
    } 

    insert = async (name, values) => {
        return await this._send('POST', `/api${name}`, values)
        
    }
    all = async (name, loadParams) => {
        return await this._send('GET', `/api${name}`, loadParams);
    }
    delete =  async (name, id) => {
        return await this._send('DELETE', `/api${name}/${id}`);
    }

    update = async (name, id, values) => {
        return await this._send('PUT', `/api${name}/${id}`, values);
    }

    updatePayments = async (name, id) => {
        return await this._send('PUT', `/api${name}/${id}`);
    }

    byKey = async (name, id) => {
        return await this._send('GET', `/api${name}/${id}`);
    }
    deepByKey = async (name) => {
        return await this._send('GET', `/api${name}`);
    }

    getUser = async () =>{
        return await this._send('GET', `/api/user`)
    }

    changePassword = async (params) =>{
        return await this._send('POST', `/api/user/change_password`, params)
    }


//get

//update


//delete
}