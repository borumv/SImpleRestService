
import axios from 'axios';
import useLocalStorage from '../hooks/useLocalStorage'
import { ErrorTablePageContext } from './../contexts/errorTablePage'
import React, { useContext } from 'react'
const BASE_HOST = 'http://localhost:8090';

export default class RestService {


  constructor() {
    this.errors = {
      hasError: false,
      errors: {}
    }
  }

  getError = () => {
    return this.errors.errors
  }

  setError = (hasError, errors) => {
    this.errors.hasError = hasError
    this.errors.errors = errors
  }

  _send = async (method, url, value, page) => {
    try {
      this.setError(false, {});
  
      // Проверяем наличие токена в localStorage перед его использованием
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('Authorization token is missing.');
      }
  
      const headers = {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`
      };
  
      const res = await fetch(`${BASE_HOST}${url}`, {
        method: page ? 'POST' : method,
        headers,
        body: page && value ? JSON.stringify({ page, value }) : value ? JSON.stringify(value) : JSON.stringify(page)
      });
  
      if (!res.ok) {
        console.log('ERROR -> ', res);
  
        if (res.status === 400 || res.status === 500) {
          const error = await res.json();
          console.log('Caught an error!', error);
          this.setError(true, error.errors);
          throw new Error(error.errors.map(item => item.message));
        }
  
        if (res.status === 403 || res.status === 401) {
          const item = await res.json();
          if (item.error === 'jwt expired') {
            try {
              // Отправляем запрос на обновление токена с использованием refreshToken
              const response = await this.refreshToken({ refreshToken: localStorage.getItem('refreshToken') });
              console.log('Response in refresh - ', response);
  
              // Обновляем токен и refreshToken в localStorage
              localStorage.setItem('token', response.accessToken);
              localStorage.setItem('refreshToken', response.refreshToken);
  
              // После успешного обновления токена, повторяем запрос с новым токеном
              return this._send(method, url, value, page);
            } catch (error) {
              console.log('Error occurred while refreshing token - ', error);
              throw new Error('Failed to refresh authorization token.');
            }
          }
        }
  
        throw new Error('Failed to fetch data from the server.');
      }
  
      // Устанавливаем состояние ошибки в "false" перед успешным завершением запроса
      this.setError(false, {});
  
      // Возвращаем данные из ответа в формате JSON
      return await res.json();
    } catch (error) {
      console.log('Error occurred during request:', error);
      throw new Error('An unexpected error occurred.');
    }
  };
  

  upload = async (table, value) => {

    const res = await axios.post(`${BASE_HOST}/api/${table}`, value, this.headers);
    if (res.status !== 200) {
      if (res.status === 400 || res.status === 403) {
        const criticalError = await res.text();
        if (criticalError)
          return { criticalError };
      }

      return { criticalError: `Could not upload file because of error status: ${res.status}.` };
    }
    return await res.data.json();
  }



  loginIn = async (value) => {
    return await this._send('POST', '/api/auth/login', value);
  }


  refreshToken = async (value) => {
    const headers = {
      'Content-Type': 'application/json'
    };
    const res = await fetch(`${BASE_HOST}/api/auth/refreshtoken`, {
      method: 'POST',
      headers,
      body: JSON.stringify(value)
    });
    console.log('tokenis Valid in req - ', res)
    return await res.json()
  }

  tokenIsValid = async (value) => {
    const headers = {
      'Content-Type': 'application/json'
    };
    const res = await fetch(`${BASE_HOST}/api/auth/validate`, {
      method: 'POST',
      headers,
      body: JSON.stringify(value)
    });
    console.log('tokenis Valid in req - ', res)
    return await res.json()
  }


  getState = () => {
    return this.errors
  }

  insert = async (name, values) => {
    return await this._send('POST', `/api${name}`, values)

  }
  all = async (name, loadParams) => {
    return await this._send('GET', `/api${name}`, loadParams);
  }
  delete = async (name, id) => {
    return await this._send('DELETE', `/api${name}/${id}`);
  }

  update = async (name, id, values) => {
    return await this._send('PUT', `/api${name}/${id}`, values);
  }

  updatePayments = async (name, id) => {
    return await this._send('PUT', `/api${name}/${id}`);
  }

  byKey = async (name, id) => {
    return await this._send('GET', `/api${name}/${id}`);
  }
  deepByKey = async (name) => {
    return await this._send('GET', `/api${name}`);
  }

  getUser = async () => {
    console.log(' we are trying to get user')
    return await this._send('GET', `/api/user`)
  }

  changePassword = async (params) => {
    return await this._send('POST', `/api/user/change_password`, params)
  }


  //get

  //update


  //delete
}