
import axios from 'axios';
import {useCallback, useContext, useEffect, useState } from 'react';

import useLocalStorage from './useLocalStorage'
import {CurrentUserContext} from '../contexts/currentUser'


export default url =>{
    
    const baseUrl = 'http://localhost:8090/api'
    const [isLoading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [response, setResponse] = useState(null);
    const [options, setOptions] = useState({});
    const [length, setLength] = useState(0);
    const [token, setToken] = useLocalStorage('token');
    // const [{isLoggedIn}, dispatch] = useContext(CurrentUserContext)


    const doFetch = useCallback((options = {}) =>{
        console.log('doFetch -- ', options)
        setOptions(options)
        setLoading(true)
     }, [])
     
    useEffect(()=>{
       if (!isLoading) {
            return
        }
        console.log('Options in useFetch - ', options)
       const header =  token ? `authorization: ${token}` : ''
       const requestOptions = {
            ...options,
            header    
            
        }
         
        axios(baseUrl + url, requestOptions)
            .then(resp => {
                console.log('response in axios')
                setLoading(false)
                setResponse(resp.data)
                setLength(resp.data.length)
        
            })
            .catch( er =>{
                console.log('словили ошибку' , er)
                setLength(0)
                setLoading(false)
                setError(er.response)
                
            })

        }, [isLoading])

    return [{response, isLoading, error, length}, doFetch]

}